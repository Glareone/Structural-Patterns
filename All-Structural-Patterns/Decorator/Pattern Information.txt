Назначение: добавляет к объекту новую функциональность – новое состояние или поведение. 
Является динамической альтернативой наследованию.

Декоратор – обёртка для декорируемого объекта и реализует тот же интерфейс, что и класс декорируемого объекта. 
Декоратор добавляет свой код до, после или вместо вызовов методов декорируемого объекта.

Примеры из .Net:
Декораторы потоков ввода/вывода:
DeflateStream и GZipStream (сжатие данных);
CryptoStream (шифрование);
BufferedStream (буферизация).

Пример использования:
1) Сначала поток буфферизовать, потом зашифровать, потом сжать. Или в любой другой последовательности.

Заместитель и Декоратор (Схожести и отличия):
По структуре похожи. 
Различаются в назначении: декоратор добавляет к объекту функциональность, а заместитель контролирует доступ к объекту.

Обычно декоратор получает объект как параметр конструктора. 
Заместитель, как правило, сам создаёт контролируемый объект.
